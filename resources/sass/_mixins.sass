@import "vars"

/*
 * FONTS
 */
@mixin font-face($font-family, $font-name, $font-weight, $font-style: normal)
  font-family: $font-name
  src: url($folder_fonts + $font-family + '/' + $font-name + '.eot')
  src: url($folder_fonts + $font-family + '/' + $font-name + '.eot?#iefix') format('embedded-opentype'), url($folder_fonts + $font-family + '/' + $font-name + '.woff') format('woff'), url($folder_fonts + $font-family + '/' + $font-name + '.ttf') format('truetype'), url($folder_fonts + $font-family + '/' + $font-name + '.svg#' + $font-name) format('svg')
  font-weight: $font-weight
  font-style: $font-style

/*
/* CONTAINERS
/*

@mixin container($position: initial)
  padding-left: calc(#{$grid-column-gap} / 2)
  padding-right: calc(#{$grid-column-gap} / 2)
  margin: 0 auto
  box-sizing: border-box
  width: 100%

  @media ($brpt_sm)
    width: $sm

  @media ($brpt_md)
    width: $md

  @media ($brpt_lg)
    width: $lg

  @media ($brpt_xl)
    width: $xl

  @if ($position == absolute)
    position: absolute
    left: 50%
    margin-left: calc(-1 * 100% / 2)
    @media ($brpt_sm)
      margin-left: calc(-1 * #{$sm} / 2)
    @media ($brpt_md)
      margin-left: calc(-1 * #{$md} / 2)
    @media ($brpt_lg)
      margin-left: calc(-1 * #{$lg} / 2)
    @media ($brpt_xl)
      margin-left: calc(-1 * #{$xl} / 2)

@mixin container-fluid()
  width: 100%
  box-sizing: border-box


/*
/* NEW GRID
/*

@mixin grid-position-column($column-start, $column-end: 0)
  grid-column-start: $column-start
  @if ($column-end == 0)
    grid-column-end: #{$column-start + 1}
  @else
    grid-column-end: #{$column-end + 1}


@mixin grid-position-row($row-start, $row-end: 0)
  grid-row-start: $row-start
  @if ($row-end == 0)
    grid-row-end: #{$row-start + 1}
  @else
    grid-row-end: #{$row-end + 1}
  

/*
/* GRID
/*

@mixin row-generate($cols, $col-gap: $grid-column-gap, $template: 1fr, $row-gap: $grid-row-gap, $wrap: wrap, $cols_after_span: $cols, $display: block)

  @if ($display == 'block')
    display: flex
  @else
    display: inline-flex
  flex-direction: row
  flex-wrap: $wrap

  @if ($cols_after_span == $cols)
    & > *
      margin-right: $col-gap
      width: calc((100% - #{$col-gap} * (#{$cols} - 1)) / #{$cols})
      box-sizing: border-box
  @else
    & > *
      margin-right: $col-gap
      box-sizing: border-box

  @if ($cols_after_span)
    & > *:nth-child(#{$cols_after_span}n)
      margin-right: 0
      margin-left: -1px
  @else
    & > *:nth-child(#{$cols}n)
      margin-right: 0
      margin-left: -1px

  @supports (display: grid)
    @if ($display == 'block')
      display: grid
    @else
      display: inline-grid
    @if ($template == 1fr)
      grid-template-columns: repeat($cols, 1fr)
    @else
      grid-template-columns: $template
    grid-auto-flow: row
    grid-column-gap: $col-gap
    & > *
      margin-right: 0
      width: auto

  @if ($row-gap)
    @if ($cols_after_span)
      @include grid-row-gap($cols_after_span, $row-gap)
    @else
      @include grid-row-gap($cols, $row-gap)




@mixin row-generate-auto($template, $col-gap: $grid-column-gap, $auto-flow: column, $display: block)

  @if ($display == 'block')
    display: flex
  @else
    display: inline-flex
  flex-direction: row

  & > *
    margin-right: $col-gap
    //width: auto

  & > *:last-child
    margin-right: 0

  @supports (display: grid)
    @if ($display == 'block')
      display: grid
    @else
      display: inline-grid
    grid-template-columns: $template
    grid-auto-flow: $auto-flow
    grid-column-gap: $col-gap
    & > *
      margin-right: 0
      //width: auto

// Выстраивает все прямые дочерние элементы в ряд с неравными (auto) ширинами элементов
// $cols - количество колонок в ряду (int)
// $col-gap - расстояние между колокнами (px)
@mixin flex-row($cols, $col-gap: $grid-column-gap)
  display: flex
  flex-direction: row

  & > *
    margin-right: $col-gap
  & > *:nth-child(#{$cols}n)
    margin-right: 0




// Выстраивает все прямые дочерние элементы в сетку с равными по ширине ячейками
// $cols - количество колонок (int)
// $col-gap - расстояние между колокнами (px)
// $row-gap - расстояние между рядами (px)
@mixin flex-grid($cols, $col-gap: $grid-column-gap, $row-gap: $grid-row-gap)
  @include flex-row($cols)
  flex-wrap: wrap

  & > *
    @include inRow($cols)

  & > *
    margin-top: $row-gap
  & > *:nth-child(-n+#{$cols})
    margin-top: 0








@mixin col-generate($template, $flex_direction: column, $row-gap: $grid-row-gap, $col-gap: $grid-column-gap)

  display: flex
  flex-direction: $flex_direction
  flex-wrap: wrap

  @supports (display: grid)
    display: grid
    grid-template-columns: 100%
    grid-template-rows: $template
    grid-row-gap: $row-gap

  @include grid-row-gap(1, $row-gap)


@mixin col-generate-auto($row-gap: $grid-row-gap, $template: auto)

  display: flex
  flex-direction: column

  @supports (display: grid)
    display: grid
    grid-template-columns: 100%
    grid-template-rows: $template
    grid-row-gap: $row-gap

  @include grid-row-gap(1, $row-gap)


@mixin grid-row-gap($cols, $gap: $grid-row-gap)
  & > *
    margin-top: $gap
  & > *:nth-child(-n+#{$cols})
    margin-top: 0

  @supports (display: grid)
    grid-row-gap: $gap
    & > *
      margin-top: 0

// $cols_in_row - кол-во общее кол-во колонок в ряду
@mixin col-span($span, $cols_in_row, $col_gap: $grid-column-gap)
  //flex-basis: calc(#{$span} / #{$cols} * 100%)
  width: calc((100% - #{$col-gap} * (#{$cols_in_row} - 1)) / #{$cols_in_row} * #{$span} + 30px * (#{$span} - 1))

  @supports (display: grid)
    width: auto
    grid-column: span $span

// Количество занимаемых колонок при 12-колночной сетке
@mixin width($cols)
  width: calc((100% - 330px) / 12 * #{$cols} + (30px * (#{$cols} - 1)))
  box-sizing: border-box


@mixin widthOf($part, $of, $row-gap: $grid-row-gap)
  width: calc((100% - #{$grid-row-gap} * #{$of - 1}) / #{$of} * #{$part})
  box-sizing: border-box

@mixin widthOf($part, $of, $container, $row-gap: $grid-row-gap)
  width: calc((#{$container} - #{$grid-row-gap} * #{$of - 1}) / #{$of} * #{$part})
  box-sizing: border-box

// Вычисление ширины исходя из указанного количества элементов в ряду
@mixin inRow($count, $row-gap: $grid-row-gap)
  width: calc((100% - #{$grid-row-gap} * #{$count - 1}) / #{$count})
  box-sizing: border-box

@mixin overlay()
  position: absolute
  top: 0
  bottom: 0
  left: 0
  right: 0


// Выстраивает все прямые дочерние элементы сетку с равными по ширине колонками
// $cols - количество колонок в ряду (int)
// $col-gap - расстояние между колокнами (px)
// $row-gap - расстояние между рядами (px)
@mixin grid($cols, $col-gap: $grid-row-gap, $row-gap: $grid-row-gap)
  // правила для IE
  width: calc(100% + #{$col-gap})
  display: flex
  flex-wrap: wrap
  flex-direction: row
  margin: -#{$row-gap} -#{$col-gap / 2} 0 -#{$col-gap / 2} // отрицательный отступ контейнера сетки для компенсации его выхода за пределы родителя из-за отступов элементов

  > *
    margin: #{$row-gap} #{$col-gap / 2} 0 #{$col-gap / 2} // вычисление отступов между колонками и рядами ($col-gap, $row-gap)
    width: calc((100% - #{$col-gap} * #{$cols}) / #{$cols} - 0.5px) // вычисление ширины элементов, исходя из их количества в одном ряду ($cols)
    box-sizing: border-box

  @content // подключение контент-блока

  @supports (display: grid)
    // правила для нормальных браузеров
    width: 100%
    display: grid //!important
    grid-template-columns: repeat($cols, 1fr)
    grid-column-gap: $col-gap
    grid-row-gap: $row-gap
    align-items: start
    margin: 0 // сброс отступа
    > *
      margin: 0 // сброс отступа эелементов
      width: initial // сброс ширины элементов
      height: auto // устраняет баг, от которого высота элементов сетки всегда 100%





//
// $span - количество занимаемых колонок
// $cols - общее количество колонок в родительской сетке
@mixin grid-col-span($span, $cols, $col-gap: $grid-column-gap)
  width: calc(((100% - #{$col-gap} * #{$cols}) / #{$cols}) * #{$span} + #{$col-gap} * #{$span - 1})

  @supports (display: grid)
    width: initial
    grid-column: span $span


// Выстраивает все прямые дочерние элементы в колонку
// $row-gap - отступ между рядами
@mixin flex-column($row-gap: $grid-row-gap)

  @if $row-gap != 0
    display: flex
    flex-direction: column
    margin-top: -#{$row-gap}

    > *
      margin-top: #{$row-gap}

  @else
    display: initial
    flex-direction: initial
    margin-top: initial

    > *
      margin-top: initial


// Устанавливает колонку, в которую надо разместить элемент grid-сетки
// $col (int) - порядковый номер колонки для размещения
// $col-gap (bool) - нужно ли учитывать псевдо отступы между колонками для IE
@mixin grid-col($col, $col-gap: false)
  @if $col-gap
    grid-column: #{$col * 2 - 1} / #{$col * 2} // для IE
    @supports (display: grid)
      grid-column: #{$col} / #{$col + 1}
  @else
    grid-column: #{$col} / #{$col + 1}


// Устанавливает, в какие колонки grid-сетки надо расположить элемент
// $col-start (int) - начальная колонка
// $cols-end ($int) - конечная колонка
// $col-gap (bool) - нужно ли учитывать псевдо отступы между колонками для IE
@mixin grid-cols($col-start, $col-end, $col-gap: false)
  @if $col-gap
    grid-column: #{$col-start * 2 - 1} / #{$col-end * 2} // для IE
    @supports (display: grid)
      grid-column: #{$col-start} / #{$col-end + 1}
  @else
    grid-column: #{$col-start} / #{$col-end + 1}



// Устанавливает ряд, в который надо разместить элемент grid-сетки
// $row (int) - порядковый номер ряда для размещения
// $row-gap (bool) - нужно ли учитывать псевдо отступы для IE
@mixin grid-row($row, $row-gap: false)
  @if $row-gap
    grid-row: #{$row * 2 - 1} / #{$row * 2} // для IE
    @supports (display: grid)
      grid-row: #{$row} / #{$row + 1}
  @else
    grid-row: #{$row} / #{$row + 1}


// Устанавливает, в какие ряды grid-сетки надо расположить элемент
// $row-start (int) - начальный ряд
// $row-end ($int) - конечный ряд
// $row-gap (bool) - нужно ли учитывать псевдо отступы между колонками для IE
@mixin grid-rows($row-start, $row-end, $row-gap: false)
  @if $row-gap
    grid-row: #{$row-start * 2 - 1} / #{$row-end * 2} // для IE
    @supports (display: grid)
      grid-row: #{$row-start} / #{$row-end + 1}
  @else
    grid-row: #{$row-start} / #{$row-end + 1}



//
@mixin text-size($font-size, $ratio)
  @each $size_name in (mini, tiny, small, medium, big, large, massive)
    .text_#{$size_name}
      font-size: #{$font-size} * #{$ratio}